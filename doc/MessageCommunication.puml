@startuml
actor Doctor1
participant ReportView
participant Presenter
participant MessageQuerier
participant MessageHandler
participant MessageManipulator
participant MessageDispatcher
'participant NotificationDispatcher
actor DoctorN

'asynchron: a ->> b


activate Doctor1
activate DoctorN
== Initial page access ==
Doctor1 -> ReportView: access
activate ReportView
' ********* Register ********
ReportView -> ReportView: onAttach
activate ReportView
ReportView -> MessageDispatcher: register
activate MessageDispatcher

MessageDispatcher --> ReportView
deactivate MessageDispatcher
ReportView --> ReportView
deactivate ReportView
' ***************************

ReportView -> Presenter: get existing message
activate Presenter
Presenter -> MessageQuerier: get existing message
activate MessageQuerier
MessageQuerier --> Presenter
deactivate MessageQuerier
Presenter --> ReportView: return existing messages
deactivate Presenter
ReportView --> Doctor1: display content
deactivate ReportView

== Message dispatching ==
...

==  ==
Doctor1 -> ReportView: Types in message and submits
activate ReportView
ReportView -> MessageHandler: handleSentMessage(message)
activate MessageHandler
MessageHandler -> MessageManipulator: save message
activate MessageManipulator
MessageManipulator --> MessageHandler
deactivate MessageManipulator


MessageHandler -> MessageDispatcher: dispatch
activate MessageDispatcher
' TODO
loop for every registered\nlistener
    MessageDispatcher ->> DoctorN: display message
end
MessageDispatcher --> MessageHandler
deactivate MessageDispatcher

/'
MessageHandler -> NotificationDispatcher: dispatch
activate NotificationDispatcher
NotificationDispatcher ->> DoctorN: display
NotificationDispatcher --> MessageHandler
deactivate NotificationDispatcher
'/

MessageHandler --> ReportView
deactivate MessageHandler


ReportView --> Doctor1
deactivate ReportView
== ==

...




@enduml