@startuml
package Presenter {
       abstract class MainPresenter{
           -view: View
           -builder: LogicBuilder
           +showView(ContentPresenter: content): void
       }
       class HomePresenter{
         - loadDoctorView(): void
         - loadPatientView(): void
       }
       class DossierPresenter{
         - loadDossierView(): void
       }
       class ReportPresenter{
         - loadReportView(): void
         - loadMessageView(): void
       }
}

package View {
    class View<extends VerticalLayout>{
        +output(): void
    }
}

package Model {
    interface Buildable {
      +build(): T
    }
    interface Queriable {
      +getById(): T
      +getBy(filters: Array): T
      +getAll(): list<t>
    }
    package Message {
        class MessageBuilder implements Buildable {
          - unitOfWork: UnitOfWork
        }
        class MessageQuerier implements Queriable {
          - unitOfWork: UnitOfWork
        }
    }

    package Doctor {
        class DoctorQuerier implements Queriable {
          - unitOfWork: UnitOfWork
        }
    }

    package Patient {
        class PatientQuerier implements Queriable {
          - unitOfWork: UnitOfWork
        }
    }

    package Report {
        class ReportQuerier implements Queriable {
          - unitOfWork: UnitOfWork
        }
    }
    package Dossier {
        class DossierQuerier implements Queriable {
          - unitOfWork: UnitOfWork
        }
    }
    class Doctor{
        -patients: Patient[]
        +receiveNotification(): void
        -createAndAddMessage(Message: msg) : void
        -handleObjective(Message: msg) : void
    }

    class Patient{
        -currentDoctor: Doctor
        -objectives: Objective[]
        -dossier: Dossier
    }

    class Objective{
        -dueDate: Date
        -creator: Doctor
        -content: String
        -finished: Boolean

    }

    class Report{
        -creator: Doctor[]
        -messages: Message[]
        -content: String
        +addMessage(Message: msg) : void
        +notify() : void
    }

    class Dossier{
        -reports: Report[]
    }

    class Message{
        -content: String
        -fromDoctor: Doctor
        -referringMessage: Message
        +evaluate(): Message
    }
    class ModelRepository<Type T>{
        +add(element: T): void
        +delete(element: T): void
        +get(filters: Array): void
    }
    class UnitOfWork{
        - connection: MongoClient
        - repositories: ModelRepository
        + store(): boolean
    }

    class MessageBuilder{
        + createAndNotify(): boolean
    }
}

Report "1" *-- "*" Message
Report "*" -left-o "*" Doctor
Patient "1" *- "*" Objective
Report "*" -right* "1" Dossier
Dossier "1" --* "1" Patient
Objective "*" - "1" Doctor
Doctor "1" - "*" Patient
Message "*" -left- "1" Doctor
UnitOfWork "1" -left- "*" ModelRepository


View "1" -- "1" MainPresenter
MainPresenter <|.. HomePresenter
MainPresenter <|.. DossierPresenter
MainPresenter <|.. ReportPresenter
ReportPresenter -up- MessageBuilder
ReportPresenter -up- MessageQuerier
HomePresenter -up- DoctorQuerier
HomePresenter -up- PatientQuerier
ReportPresenter -up- ReportQuerier
DossierPresenter -up- DossierQuerier

DossierQuerier "1" -up- "1" UnitOfWork
DoctorQuerier "1" -- "1" UnitOfWork
PatientQuerier "1" -- "1" UnitOfWork
ReportQuerier "1" -- "1" UnitOfWork
MessageQuerier "1" -- "1" UnitOfWork
MessageBuilder "1" -- "1" UnitOfWork

note top of Model: Every model class has a setter and a getter for all attribute

@enduml